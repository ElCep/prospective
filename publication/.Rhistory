ls7_ndvi$variable <- recode(ls7_ndvi$variable, spot_em = "emprise spot", plot_em = "parcelle 2008")
ggplot()+
geom_point(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
geom_path(data =ls7_ndvi, aes(x = date, y = value, colour = variable))
min(ls7_ndvi$date)
ls7_ndvi <- read.csv("../GIMMS_models/ls7_emprise_spot_01_19992016.csv", header = T)
colnames(ls7_ndvi) <- c("date","spot_em","plot_em")
ls7_ndvi <- melt(ls7_ndvi, id = "date")
ls7_ndvi$date <- as.Date(as.character(ls7_ndvi$date), format='%b %d, %Y')
ls7_ndvi$variable <- recode(ls7_ndvi$variable, spot_em = "emprise spot", plot_em = "parcelle 2008")
ggplot()+
geom_point(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
geom_path(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
labs(titre = "NDVI pour le mois de Janvier a partir des images landsat7")
ggplot()+
geom_point(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
geom_path(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
labs(titre = "NDVI pour le mois de Janvier a partir des images landsat7")
ggplot()+
geom_point(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
geom_path(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
labs(titre = "NDVI pour le mois de Janvier a partir des images landsat7", y = "NDVI")
?labs
ggplot()+
geom_point(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
geom_path(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
labs(title = "NDVI pour le mois de Janvier a partir des images landsat7", y = "NDVI")
anom
my.df$random <- d$random
gimms.parcelle.df$date <- as.Date(as.character(gimms.parcelle.df$system.time_start), format='%b %d, %Y')
gimms.parcelle.df$year <- format(as.Date(as.character(gimms.parcelle.df$system.time_start), format='%b %d, %Y'),"%Y")
my.df <- subset(gimms.parcelle.df, select = c("date","ndvi"))
my.df$ym <- as.yearmon(my.df$date) #pkg zoo
my.df <- my.df %>%
group_by(ym) %>%
summarise(meanDNVI = mean(ndvi))
my.ts <- ts(my.df$meanDNVI, frequency=12, start=c(1984,3))
my.ts <- na.remove(my.ts)
#plot.ts(my.ts)
d <- decompose(my.ts)
plot(d)
my.df$random <- d$random
my.df$date <- as.POSIXct(my.df$ym,format = "%b %Y",tz = "GMT")
res <- AnomalyDetectionTs(my.df[,c(4,3)], max_anoms=0.05, direction='both', plot=TRUE)
## You will get no warning, so don't do this unless you are really sure.
rm(list = ls())
## Lib
library(readr) ## read csv
library(rgdal) ## read spatial data
library(tidyverse) ##big packges with ddplyr and ggplot2
library(zoo) ## date manipulation
library(tseries) ## time serie analyse
library(reshape2) ## manip data (melt)
Sys.setlocale("LC_TIME", "C") ##Deal with date in english
##############################################################
## Fonction convert S4 object in df for ggplot
##############################################################
sp4ggplot <- function(my.shp){
my.shp@data$id <- row.names(my.shp@data)
pt.df <- fortify(my.shp, region="id")
sp.df <- left_join(pt.df, my.shp@data, by="id")
return(sp.df)
}
## GIMM
gimms.df <- read.csv("../GIMMS_models/gimms_gmv.csv", header = T)
gimms.parcelle.df <- read.csv("../GIMMS_models/gimms_parcelle2008.csv", header = T)
##sp data
sng.shp <- readOGR(dsn = "../../data_fenetre/", layer = "senegal_shape", verbose = FALSE)
sng.df <- sp4ggplot(sng.shp)
gmv.shp <- readOGR(dsn = "../../data_fenetre/", layer = "emprise_GMV" , verbose = FALSE)
gmv.df <- sp4ggplot(gmv.shp)
wk.windiws.shp <- readOGR(dsn = "../../data_fenetre/", layer = "emprises_fenetres" , verbose = FALSE)
wk.windiws.df <- sp4ggplot(wk.windiws.shp)
my.df$random <- d$random
gimms.parcelle.df$date <- as.Date(as.character(gimms.parcelle.df$system.time_start), format='%b %d, %Y')
gimms.parcelle.df$year <- format(as.Date(as.character(gimms.parcelle.df$system.time_start), format='%b %d, %Y'),"%Y")
my.df <- subset(gimms.parcelle.df, select = c("date","ndvi"))
my.df$ym <- as.yearmon(my.df$date) #pkg zoo
my.df <- my.df %>%
group_by(ym) %>%
summarise(meanDNVI = mean(ndvi))
my.ts <- ts(my.df$meanDNVI, frequency=12, start=c(1984,3))
my.ts <- na.remove(my.ts)
#plot.ts(my.ts)
d <- decompose(my.ts)
plot(d)
my.df$random <- d$random
my.df$date <- as.POSIXct(my.df$ym,format = "%b %Y",tz = "GMT")
res <- AnomalyDetectionTs(my.df[,c(4,3)], max_anoms=0.05, direction='both', plot=TRUE)
library(AnomalyDetection)
my.df$random <- d$random
my.df$date <- as.POSIXct(my.df$ym,format = "%b %Y",tz = "GMT")
res <- AnomalyDetectionTs(my.df[,c(4,3)], max_anoms=0.05, direction='both', plot=TRUE)
anom <- res$anoms
res$plot+
geom_text(data = anom, aes(x = timestamp, y = anoms, label = timestamp))
## Est-ce qu'on pourrait pas utiliser stan pour Ã©valuer le rsique de nouvelles anomalies dans le future ?
anom
ggplot()+
geom_point(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
geom_path(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
geom_smooth(ata =ls7_ndvi, aes(x = date, y = value, colour = variable))+
labs(title = "NDVI pour le mois de Janvier a partir des images landsat7", x = "Date", y = "NDVI")
ls7_ndvi <- read.csv("../GIMMS_models/ls7_emprise_spot_01_19992016.csv", header = T)
colnames(ls7_ndvi) <- c("date","spot_em","plot_em")
ls7_ndvi <- melt(ls7_ndvi, id = "date")
ls7_ndvi$date <- as.Date(as.character(ls7_ndvi$date), format='%b %d, %Y')
ls7_ndvi$variable <- recode(ls7_ndvi$variable, spot_em = "emprise spot", plot_em = "parcelle 2008")
ggplot()+
geom_point(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
geom_path(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
geom_smooth(ata =ls7_ndvi, aes(x = date, y = value, colour = variable))+
labs(title = "NDVI pour le mois de Janvier a partir des images landsat7", x = "Date", y = "NDVI")
ggplot()+
geom_point(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
geom_path(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
geom_smooth(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
labs(title = "NDVI pour le mois de Janvier a partir des images landsat7", x = "Date", y = "NDVI")
ls7_ndvi <- read.csv("../GIMMS_models/ls7_emprise_spot_01_19992016.csv", header = T)
colnames(ls7_ndvi) <- c("date","spot_em","plot_em")
ls7_ndvi <- melt(ls7_ndvi, id = "date")
ls7_ndvi$date <- as.Date(as.character(ls7_ndvi$date), format='%b %d, %Y')
ls7_ndvi$variable <- recode(ls7_ndvi$variable, spot_em = "emprise spot", plot_em = "parcelle 2008")
ggplot()+
geom_point(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
geom_path(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
# geom_smooth(data =ls7_ndvi, aes(x = date, y = value, colour = variable))+
labs(title = "NDVI pour le mois de Janvier a partir des images landsat7", x = "Date", y = "NDVI")
library(rgrass7)
library(rgdal)
library(raster)
rm(list = ls())
initGRASS(gisBase = "/usr/lib/grass72", home = tempdir(),
gisDbase = "/home/delaye/Documents/futurSahel/grassDB/",
location = "blog_mares", mapset = "PERMANENT", override=TRUE)
execGRASS("g.list", parameters = list(type = "raster"))
execGRASS("g.region", parameters = list(res = "30", vector="emprise_hydrique_sng"))
my.pattern <- "Elevation30m_ND*"
rast.div.l <- attr(execGRASS("g.list", parameters = list(type = "raster", pattern = my.pattern)),"resOut") ## get a raster list from location mapset
rast.div.l
rast.div.l %in% "depress"
rast.div.l %in% "*depress"
library(stringr)
?str_locate()
str_locate(rast.div.l,"_depress")
str_detect(rast.div.l,"_depress")
rast.div.l <- rast.div.l[!str_detect(rast.div.l,"_depress")]
rast.div.l <- rast.div.l[!str_detect(rast.div.l,"_direction")]
execGRASS("r.patch", parameters = list(input=rast.div.l,
output="Elev30m_ferlo"),
flags = c("overwrite"))
execGRASS("g.region", parameters = list(res = "30", vector="emprise_hydrique_sng"))
execGRASS("r.fill.dir", parameters = list(input="Elev30m_ferlo",
output="Elev30m_ferlo_depress",
direction="Elev30m_ferlo_direction"),
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="ponds = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, Elev30m_ferlo_depress - Elev30m_ferlo , null())",
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="pondsMask = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, 1 , null())",
flags = c("overwrite"))
execGRASS("g.list", parameters = list(type = "raster"))
my.pattern <- "Elevation30m_NE*"
rast.div.l <- attr(execGRASS("g.list", parameters = list(type = "raster", pattern = my.pattern)),"resOut") ## get a raster list from location mapset
execGRASS("r.patch", parameters = list(input=rast.div.l,
output="Elev30m_ferlo"),
flags = c("overwrite"))
execGRASS("r.patch", parameters = list(input=rast.div.l,
output="Elev30m_ferlo2"),
flags = c("overwrite"))
execGRASS("r.fill.dir", parameters = list(input="Elev30m_ferlo2",
output="Elev30m_ferlo2_depress",
direction="Elev30m_ferlo2_direction"),
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="ponds = if(Elev30m_ferlo2_depress - Elev30m_ferlo2 > 0.1, Elev30m_ferlo2_depress - Elev30m_ferlo2 , null())",
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="pondsMask = if(Elev30m_ferlo2_depress - Elev30m_ferlo2 > 0.1, 1 , null())",
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="ponds = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, Elev30m_ferlo_depress - Elev30m_ferlo , null())",
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="pondsMask = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, 1 , null())",
flags = c("overwrite"))
execGRASS("r.patch", parameters = list(input=c("ponds","ponds2"),
output="ponds"),
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="ponds2 = if(Elev30m_ferlo2_depress - Elev30m_ferlo2 > 0.1, Elev30m_ferlo2_depress - Elev30m_ferlo2 , null())",
flags = c("overwrite"))
execGRASS("r.patch", parameters = list(input=c("ponds","ponds2"),
output="ponds"),
flags = c("overwrite"))
execGRASS("r.patch", parameters = list(input=c("pondsMask","pondsMask2"),
output="pondsMask"),
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="pondsMask2 = if(Elev30m_ferlo2_depress - Elev30m_ferlo2 > 0.1, 1 , null())",
flags = c("overwrite"))
execGRASS("r.patch", parameters = list(input=c("pondsMask","pondsMask2"),
output="pondsMask"),
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="ponds = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, Elev30m_ferlo_depress - Elev30m_ferlo , null())",
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="pondsMask = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, 1 , null())",
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="ponds = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, Elev30m_ferlo_depress - Elev30m_ferlo , null())",
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="pondsMask = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, 1 , null())",
flags = c("overwrite"))
execGRASS("g.region", parameters = list(res = "30", vector="emprise_hydrique_sng"))
execGRASS("r.mapcalc", expression="ponds = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, Elev30m_ferlo_depress - Elev30m_ferlo , null())",
flags = c("overwrite"))
my.pattern <- "Elevation30m_ND*"
rast.div.l <- attr(execGRASS("g.list", parameters = list(type = "raster", pattern = my.pattern)),"resOut") ## get a raster list from location mapset
rast.div.l <- rast.div.l[!str_detect(rast.div.l,"_depress")]
rast.div.l <- rast.div.l[!str_detect(rast.div.l,"_direction")]
execGRASS("r.patch", parameters = list(input=rast.div.l,
output="Elev30m_ferlo"),
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="ponds = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, Elev30m_ferlo_depress - Elev30m_ferlo , null())",
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="pondsMask = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, 1 , null())",
flags = c("overwrite"))
execGRASS("r.patch", parameters = list(input=c("ponds","ponds2"),
output="ponds"),
flags = c("overwrite"))
execGRASS("r.patch", parameters = list(input=c("pondsMask","pondsMask2"),
output="pondsMask"),
flags = c("overwrite"))
execGRASS("r.reclass.area", parameters = list(input="pondsMask",
output="pondsMask_gr360m",
value=0.36, #value in ha
mode="greater"),
flags = c("overwrite"))
execGRASS("r.patch", parameters = list(input=c("Elev30m_ferlo","Elev30m_ferlo2"),
output="Elev30m_ferlo"),
flags = c("overwrite"))
execGRASS("r.patch", parameters = list(input=c("Elev30m_ferlo_depress","Elev30m_ferlo2_depress"),
output="Elev30m_ferlo_depress"),
flags = c("overwrite"))
execGRASS("r.mask", parameters = list(raster="pondsMask_gr360m"))
execGRASS("r.mapcalc", expression="only_ponds = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, Elev30m_ferlo_depress - Elev30m_ferlo , null())",
flags = c("overwrite"))
execGRASS("r.mapcalc", expression="only_ponds_mask = if(Elev30m_ferlo_depress - 'Elev30m_ferlo-28-XXII' > 0.1, 6 , null())",
flags = c("overwrite"))
execGRASS("r.mask", flags = c("r"))
execGRASS("r.mask", parameters = list(raster="pondsMask_gr360m"))
execGRASS("r.mapcalc", expression="only_ponds_mask = if(Elev30m_ferlo_depress - Elev30m_ferlo > 0.1, 6 , null())",
flags = c("overwrite"))
execGRASS("r.mask", flags = c("r"))
execGRASS("r.neighbors", parameters = list(input="only_ponds",
output="only_ponds_max",
method="maximum"),
flags = c("overwrite"))
execGRASS("r.mask", parameters = list(raster="pondsMask_gr360m"))
execGRASS("r.neighbors", parameters = list(input="only_ponds",
output="only_ponds_max",
method="maximum"),
flags = c("overwrite"))
execGRASS("r.mask", flags = c("r"))
execGRASS("r.neighbors", parameters = list(input="only_ponds",
output="only_ponds_max",
method="maximum",
selection="only_ponds_mask"),
flags = c("overwrite"))
8000/30
## Using GRASS-GIS and DEM data we detects ponds
#author : Etienne Delay
library(rgrass7)
library(rgdal)
library(raster)
library(stringr)
######################################################################
##  detection des mares et autres zones d'Ã©coulement
#####################################################################
## remove (almost) everything in the working environment.
## You will get no warning, so don't do this unless you are really sure.
rm(list = ls())
# initialisation and the use of North Carolina sample dataset
initGRASS(gisBase = "/usr/lib/grass72", home = tempdir(),
gisDbase = "/home/delaye/Documents/futurSahel/grassDB/",
location = "blog_mares", mapset = "PERMANENT", override=TRUE)
266*266
execGRASS("r.mapcalc", expression="grid10km_ponds_pct = grid10km_ponds / (266 * 266) * 100",
flags = c("overwrite"))
execGRASS("g.region", parameters = list(res = "10000", raster="only_ponds_max"))
execGRASS("r.resamp.stats", parameters = list(input="only_ponds_max",
output="grid10km_ponds_deepMean",
method="median"),
flags = c("overwrite"))
execGRASS("r.out.gdal", parameters = list(input="grid10km_ponds_pct",
output="/home/delaye/Documents/futurSahel/GIS/Mares/grid_10km_pct.tif",
format="GTiff"),
flags = c("overwrite"))
library(raster)
cells <- raster("~/gama_workspace/Resource_ferlo/includes/ndvi_ferlo/gimms198201_32628.asc")
plot(cells)
summary(cells)
plot(na.omit(cells),main="plop")
writeRaster(cells, "~/gama_workspace/Resource_ferlo/includes/ndvi_ferlo/gimms198201_32628.asc")
?writeRaster
writeRaster(cells, "~/gama_workspace/Resource_ferlo/includes/ndvi_ferlo/gimms198201_32628.asc",overwrite=TRUE)
writeRaster(cells, "~/gama_workspace/Resource_ferlo/includes/ndvi_ferlo/gimms198201_32628.asc", overwrite=TRUE)
writeRaster(cells, "~/gama_workspace/Resource_ferlo/includes/ndvi_ferlo/gimms198201_32628_1.asc", overwrite=TRUE)
cells <- raster("~/gama_workspace/Resource_ferlo/includes/ndvi_ferlo/gimms198201_32628.tif")
cells <- na.omit(cells)
writeRaster(cells, "~/gama_workspace/Resource_ferlo/includes/ndvi_ferlogimms198201_32628_1.tif", overwrite=TRUE)
writeRaster(cells, "~/gama_workspace/Resource_ferlo/includes/gimms198201_32628_1.tif", overwrite=TRUE)
install.packages(c("poppr", "mmod", "magrittr", "treemap"), repos = "http://cran.rstudio.com", dependencies = TRUE)
library(devtools)
install_github("dmgatti/DOQTL")
library(DOQTL)
gg.hceres <- ggplot(data <- resum_pub)+
geom_bar(aes(x = Extra, y = pct_pub, fill = Extra), stat="identity")+
#coord_polar(theta='y')+
theme_bw()+
theme(#panel.grid = element_blank(), ## remove guide lines
#axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
legend.position="top"
)+
labs(x = "", y = "Quantification", title = paste(sum(resum_pub$sum_pub, na.rm = T),"prod. scienctifique depuis 5 ans"))+
scale_fill_hue(name="Classification\nHCERES (%)")
gg.hceres
## Pie chart for my last slide resumer
library(tidyverse)
setwd("~/Dropbox/dossiers_admin/dossier_CIRAD/Green2017/Audition/prez/publication/")
pub <- read.csv("curriculum.csv",header = T, sep = ",")
unique(pub$Extra)
# [1] conferencePaper bookSection     journalArticle  presentation    magazineArticle thesis
pub$nb <- 1
## selction last 5 years
sel <- pub$Publication.Year > (2017 - 5)
pub5 <- pub[sel,]
resum_pub <- pub5 %>%
group_by(Extra, Publication.Year) %>%
summarise(
sum_pub = sum(nb),
pct_pub = sum(nb) / 33 * 100)
gg.hceres <- ggplot(data <- resum_pub)+
geom_bar(aes(x = Extra, y = pct_pub, fill = Extra), stat="identity")+
#coord_polar(theta='y')+
theme_bw()+
theme(#panel.grid = element_blank(), ## remove guide lines
#axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
legend.position="top"
)+
labs(x = "", y = "Quantification", title = paste(sum(resum_pub$sum_pub, na.rm = T),"prod. scienctifique depuis 5 ans"))+
scale_fill_hue(name="Classification\nHCERES (%)")
gg.hceres
gg.hceres <- ggplot(data <- resum_pub)+
geom_bar(aes(x = Extra, y = pct_pub, fill = Extra), stat="identity")+
#coord_polar(theta='y')+
theme_bw(base_size = 14)+
theme(#panel.grid = element_blank(), ## remove guide lines
#axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
legend.position="top"
)+
labs(x = "", y = "Quantification", title = paste(sum(resum_pub$sum_pub, na.rm = T),"prod. scienctifique depuis 5 ans"))+
scale_fill_hue(name="Classification\nHCERES (%)")
gg.hceres
gg.hceres <- ggplot(data <- resum_pub)+
geom_bar(aes(x = Extra, y = pct_pub, fill = Extra), stat="identity")+
#coord_polar(theta='y')+
theme_bw(base_size = 14)+
theme(#panel.grid = element_blank(), ## remove guide lines
#axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
legend.position="none" #top
)+
labs(x = "", y = "Quantification", title = paste(sum(resum_pub$sum_pub, na.rm = T),"prod. scienctifique depuis 5 ans"))+
scale_fill_hue(name="Classification\nHCERES (%)")
gg.hceres
View(resum_pub)
gg.hceres <- ggplot(data <- resum_pub)+
geom_bar(aes(x = Extra, y = sum_pub, fill = Extra), stat="identity")+
#coord_polar(theta='y')+
theme_bw(base_size = 14)+
theme(#panel.grid = element_blank(), ## remove guide lines
#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
legend.position="none" #top
)+
labs(x = "", y = "Quantification", title = paste(sum(resum_pub$sum_pub, na.rm = T),"prod. scienctifique depuis 5 ans"))+
scale_fill_hue(name="Classification\nHCERES (%)")
gg.hceres
resum_pub <- na.omit(resum_pub)
gg.hceres <- ggplot(data <- resum_pub)+
geom_bar(aes(x = Extra, y = sum_pub, fill = Extra), stat="identity")+
#coord_polar(theta='y')+
theme_bw(base_size = 14)+
theme(#panel.grid = element_blank(), ## remove guide lines
#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
legend.position="none" #top
)+
labs(x = "", y = "Quantification", title = paste(sum(resum_pub$sum_pub, na.rm = T),"prod. scienctifique depuis 5 ans"))+
scale_fill_hue(name="Classification\nHCERES (%)")
gg.hceres
gg.hceres <- ggplot(data <- resum_pub)+
geom_bar(aes(x = Extra, y = sum_pub, fill = Extra), stat="identity")+
#coord_polar(theta='y')+
theme_bw(base_size = 14)+
theme(#panel.grid = element_blank(), ## remove guide lines
#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
legend.position="none", #top
axis.text.x = element_text(angle = 45, hjust = 1)
)+
labs(x = "", y = "Quantification", title = paste(sum(resum_pub$sum_pub, na.rm = T),"prod. scienctifique depuis 5 ans"))+
scale_fill_hue(name="Classification\nHCERES (%)")
gg.hceres
gg.hceres <- ggplot(data <- resum_pub)+
geom_bar(aes(x = Extra, y = sum_pub, fill = Extra), stat="identity")+
#coord_polar(theta='y')+
theme_bw(base_size = 14)+
theme(#panel.grid = element_blank(), ## remove guide lines
#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
legend.position="none", #top
axis.text.x = element_text(angle = 45, hjust = 1)
)+
scale_colour_brewer(palette = "Set1")
labs(x = "", y = "Quantification", title = paste(sum(resum_pub$sum_pub, na.rm = T),"prod. scienctifique depuis 5 ans"))+
scale_fill_hue(name="Classification\nHCERES (%)")
gg.hceres <- ggplot(data <- resum_pub)+
geom_bar(aes(x = Extra, y = sum_pub, fill = Extra), stat="identity")+
#coord_polar(theta='y')+
theme_bw(base_size = 14)+
theme(#panel.grid = element_blank(), ## remove guide lines
#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
legend.position="none", #top
axis.text.x = element_text(angle = 45, hjust = 1)
)+
scale_colour_brewer(palette = "Set1")+
labs(x = "", y = "Quantification", title = paste(sum(resum_pub$sum_pub, na.rm = T),"prod. scienctifique depuis 5 ans"))+
scale_fill_hue(name="Classification\nHCERES (%)")
gg.hceres
gg.hceres <- ggplot(data <- resum_pub)+
geom_bar(aes(x = Extra, y = sum_pub, fill = Extra), stat="identity")+
#coord_polar(theta='y')+
theme_bw(base_size = 14)+
theme(#panel.grid = element_blank(), ## remove guide lines
#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
legend.position="none", #top
axis.text.x = element_text(angle = 45, hjust = 1)
)+
scale_fill_brewer(palette = "Set1")+
labs(x = "", y = "Quantification", title = paste(sum(resum_pub$sum_pub, na.rm = T),"prod. scienctifique depuis 5 ans"))+
scale_fill_hue(name="Classification\nHCERES (%)")
gg.hceres
gg.hceres <- ggplot(data <- resum_pub)+
geom_bar(aes(x = Extra, y = sum_pub, fill = Extra), stat="identity")+
#coord_polar(theta='y')+
theme_bw(base_size = 14)+
theme(#panel.grid = element_blank(), ## remove guide lines
#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
axis.ticks=element_blank(),  # the axis ticks
axis.title=element_blank(),  # the axis labels
legend.position="none", #top
axis.text.x = element_text(angle = 45, hjust = 1)
)+
scale_fill_brewer(palette = "Set1")+
labs(x = "", y = "Quantification", title = paste(sum(resum_pub$sum_pub, na.rm = T),"prod. scienctifique depuis 5 ans"))
%scale_fill_hue(name="Classification\nHCERES (%)")
gg.hceres
ggsave("../img/publication_pie.png",gg.hceres)
library(gamar)
defpath("~/app/Gama1.7.2RC/")
experiment1 <- getmodelparameter("~/gama_workspace/CeLL/models/Lobesia.gaml","Rexperiment")
getoutputnames(experiment1)
experiment1 <- setparametervalue(experiment1,"nblobesias",100)
experiment1 <- setparametervalue(experiment1,"visibility_other",1)
experiment1 <- setparametervalue(experiment1,"rotation",90)
experiment1 <- setparametervalue(experiment1,"ageOfDie",16)
experiment1 <- setparametervalue(experiment1,"nb_egg",10)
experiment1 <- setparametervalue(experiment1,"ageOfDie",16)
experiment1 <- getmodelparameter("~/gama_workspace/CeLL/models/Lobesia.gaml","Rexperiment")
getoutputnames(experiment1)
library(gamar)
defpath("~/app/Gama1.7.2RC/")
experiment1 <- getmodelparameter("~/gama_workspace/CeLL/models/Lobesia.gaml","Rexperiment")
?getoutputnames
?getoutputnames
??getoutputnames
library(devtools)
install_github("choisy/gamar")
library(gamar)
defpath("~/app/Gama1.7.2RC/")
experiment1 <- getmodelparameter("~/gama_workspace/CeLL/models/Lobesia.gaml","Rexperiment")
getoutputnames(experiment1)
